---

- block:
    - name: Install Nginx clone packages
      ansible.builtin.package:
        name: '{{ nginx_clone_packages }}'
        state: present

    - name: Install Nginx extra packages
      ansible.builtin.package:
        name: '{{ nginx_extra_packages }}'
        state: present

    - name: Install Nginx Python packages for Ansible
      ansible.builtin.pip:
        name: cryptography
        executable: '{{ nginx_pip_path }}'
        state: "{{ (nginx_cryptography_version == 'latest')|ternary('latest', omit) }}"
        umask: '{{ nginx_pip_umask }}'
        version: "{{ (nginx_cryptography_version == 'latest')|ternary(omit, nginx_cryptography_version) }}"
      environment: '{{ nginx_pip_environment }}'
  become: '{{ do_become }}'
  tags: packages

- include_tasks: pagespeed.yml
  tags: packages
  when: nginx_pagespeed_module_enabled|bool

- block:
    - name: Clone Nginx source code
      ansible.builtin.git:
        repo: https://github.com/nginx/nginx.git
        dest: '{{ local_source_directory }}/nginx'
        force: yes
        version: '{{ nginx_version }}'
      environment: '{{ nginx_clone_environment }}'
      register: _nginx_git

    - name: Clone Length Hiding Filter module source code
      ansible.builtin.git:
        repo: https://github.com/nulab/nginx-length-hiding-filter-module.git
        dest: '{{ local_source_directory }}/nginx-length-hiding-filter-module'
        force: yes
        version: '{{ nginx_length_hiding_filter_module_version }}'
      environment: '{{ nginx_clone_environment }}'
      register: _nginx_length_hiding_filter_module_git
      when: nginx_length_hiding_filter_module_enabled|bool

    - block:
        - name: Clone Upload module source code
          ansible.builtin.git:
            repo: https://github.com/vkholodkov/nginx-upload-module.git
            dest: '{{ local_source_directory }}/nginx-upload-module'
            force: yes
            version: '{{ nginx_upload_module_version }}'
          environment: '{{ nginx_clone_environment }}'
          register: _nginx_upload_module_git

        - name: Clone Upload Progress module source code
          ansible.builtin.git:
            repo: https://github.com/masterzen/nginx-upload-progress-module.git
            dest: '{{ local_source_directory }}/nginx-upload-progress-module'
            force: yes
            version: '{{ nginx_upload_progress_module_version }}'
          environment: '{{ nginx_clone_environment }}'
          register: _nginx_upload_progress_module_git
      when: nginx_upload_module_enabled|bool

    - name: Clone Zip module source code
      ansible.builtin.git:
        repo: https://github.com/evanmiller/mod_zip.git
        dest: '{{ local_source_directory }}/nginx-zip-module'
        force: yes
        version: '{{ nginx_zip_module_version }}'
      environment: '{{ nginx_clone_environment }}'
      register: _nginx_zip_module_git
      when: nginx_zip_module_enabled|bool

    - name: Set Nginx build configuration
      ansible.builtin.set_fact:
        nginx_build_cfg: >
          --prefix=/usr/share/nginx
          --conf-path=/etc/nginx/nginx.conf
          --http-log-path=/var/log/nginx/access.log
          --error-log-path=/var/log/nginx/error.log
          --lock-path=/var/lock/nginx.lock
          --pid-path=/run/nginx.pid
          --http-client-body-temp-path=/var/lib/nginx/body
          --http-fastcgi-temp-path=/var/lib/nginx/fastcgi
          --http-proxy-temp-path=/var/lib/nginx/proxy
          --http-scgi-temp-path=/var/lib/nginx/scgi
          --http-uwsgi-temp-path=/var/lib/nginx/uwsgi
          {{ nginx_build_flags|join(' ') }}
          {% if nginx_length_hiding_filter_module_enabled %}
          --add-module={{ local_source_directory }}/nginx-length-hiding-filter-module
          {% endif %}
          {% if nginx_upload_module_enabled %}
          --add-module={{ local_source_directory }}/nginx-upload-module
          --add-module={{ local_source_directory }}/nginx-upload-progress-module
          {% endif %}
          {% if nginx_zip_module_enabled %}
          --add-module={{ local_source_directory }}/nginx-zip-module
          {% endif %}
          {{ nginx_pagespeed_module_configure }}

    - name: Set Nginx build environment
      ansible.builtin.set_fact:
        nginx_build_env: >
          {{ nginx_build_cfg }}
          {{ _nginx_git.after }}
          {{ nginx_server_header_engine }}
          {{ _nginx_length_hiding_filter_module_git.after|default('') }}
          {{ _nginx_upload_module_git.after|default('') }}
          {{ _nginx_upload_progress_module_git.after|default('') }}
          {{ _nginx_zip_module_git.after|default('') }}

    - name: Detect if Nginx must be reinstalled
      ansible.builtin.command:
        cat '{{ local_source_directory }}/nginx.build.cfg'
      changed_when: >
        nginx_build_env|trim != nginx_build.stdout|default('')|trim
      check_mode: no
      failed_when: no
      register: nginx_build

    - block:
        - include_tasks: setup-build-dep-{{ ansible_pkg_mgr }}.yml

        - name: Install Nginx build packages
          ansible.builtin.package:
            name: '{{ nginx_build_packages }}'
            state: present

        - name: Set Nginx Server header engine
          ansible.builtin.replace:
            dest: '{{ local_source_directory }}/nginx/src/http/ngx_http_header_filter_module.c'
            replace: '{{ item }}[] = "Server: {{ nginx_server_header_engine }}" CRLF;'
            regexp: '{{ item }}\[\] = "Server: [^;]+;$'
          loop:
            - ngx_http_server_string
            - ngx_http_server_full_string
            - ngx_http_server_build_string

        - name: Configure Nginx build process
          ansible.builtin.command:
            ./auto/configure {{ nginx_build_cfg }}
          args:
            chdir: '{{ local_source_directory }}/nginx'

        - name: Build Nginx from source
          ansible.builtin.make:
            chdir: '{{ local_source_directory }}/nginx'
            params:
              '--jobs': '{{ ansible_processor_cores }}'

        - name: Install Nginx from source
          ansible.builtin.make:
            chdir: '{{ local_source_directory }}/nginx'
            target: install

        - name: Make Nginx binary executable
          ansible.builtin.file:
            name: '{{ nginx_daemon_path }}'
            mode: '755'
            state: file

        - name: Save build environment
          ansible.builtin.copy:
            content: '{{ nginx_build_env }}'
            dest: '{{ local_source_directory }}/nginx.build.cfg'

        - name: Trigger Nginx restart
          ansible.builtin.command:
            ls /dev/null
          changed_when: yes
          check_mode: no
          notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} restart nginx'
      when: nginx_build is change
  become: '{{ do_become }}'
  tags: packages

- block:
    - name: Create Nginx directories
      ansible.builtin.file:
        name: '{{ item.name }}'
        owner: '{{ item.owner|default(omit) }}'
        group: '{{ item.group|default(omit) }}'
        mode: '755'
        state: directory
      loop:
        - { name: '/etc/nginx/conf.d'        }
        - { name: '/etc/nginx/sites-auth'    }
        - { name: '/etc/nginx/sites-dhparam' }
        - { name: '/etc/nginx/sites-enabled' }
        - { name: '/etc/nginx/sites-ssl'     }
        - { name: '/var/lib/nginx'           }
        - { name: '/var/log/nginx', owner: '{{ nginx_daemon_user }}', group: '{{ nginx_daemon_group }}' }

    - name: Configure Nginx
      ansible.builtin.template:
        src: '{{ item.src }}'
        dest: /etc/nginx/{{ item.dest }}
        mode: '644'
      loop:
        - { src: '{{ nginx_config_file }}',          dest: nginx.conf           }
        - { src: '{{ nginx_security_config_file }}', dest: conf.d/security.conf }
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'

    - name: Remove default site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'

    - include_tasks: setup-service-{{ nginx_daemon_mode }}.yml
  become: '{{ do_become }}'
  tags: config

- block:
    - name: Start Nginx service
      ansible.builtin.supervisorctl:
        name: nginx
        state: started
      ignore_errors: yes
      register: _nginx_start

    - name: Restart Nginx service
      ansible.builtin.supervisorctl:
        name: nginx
        state: restarted
      when: _nginx_start is failure
  become: '{{ do_become }}'
  tags: services
  when: nginx_daemon_mode == 'supervisor'

- name: Start Nginx service
  ansible.builtin.service:
    name: nginx
    enabled: yes
    state: started
  become: '{{ do_become }}'
  tags: services
  when: nginx_daemon_modes[nginx_daemon_mode] == 'system'

- name: Trigger Nginx reload
  ansible.builtin.command:
    ls /dev/null
  changed_when: yes
  check_mode: no
  notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
  tags: update
  when: nginx_reload_on_update|bool

- block:
    - name: Setup the Nginx sites
      ansible.builtin.template:
        src: '{{ item.value.config_file }}'
        dest: /etc/nginx/sites-enabled/{{ item.value.name }}.conf
        mode: '644'
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      with_dict: '{{ nginx_sites }}'

    - name: Setup the Nginx sites basic authentication
      ansible.builtin.template:
        src: '{{ item.value.auth_file }}'
        dest: /etc/nginx/sites-auth/{{ item.value.name }}.conf
        mode: '644'
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.auth_file|default('')|length > 0
      with_dict: '{{ nginx_sites }}'

    - name: Generate the Nginx self signed certificates (private key)
      ansible.builtin.openssl_privatekey:
        path: /etc/nginx/sites-ssl/{{ item.value.name }}.key
        state: present
        owner: '{{ nginx_daemon_user }}'
        group: '{{ nginx_daemon_group }}'
        mode: '440'
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.ssl_auto_signed is defined
      with_dict: '{{ nginx_sites }}'

    - name: Generate the Nginx self signed certificates (request)
      ansible.builtin.openssl_csr:
        path: /etc/nginx/sites-ssl/{{ item.value.name }}.csr
        privatekey_path: /etc/nginx/sites-ssl/{{ item.value.name }}.key
        common_name: '{{ item.value.ssl_auto_signed.common_name|default(item.value.domains[0]) }}'
        country_name: '{{ item.value.ssl_auto_signed.country_name|default(omit) }}'
        email_address: '{{ item.value.ssl_auto_signed.email_address|default(omit) }}'
        extended_key_usage: '{{ item.value.ssl_auto_signed.extended_key_usage|default(omit) }}'
        key_usage: '{{ item.value.ssl_auto_signed.key_usage|default(omit) }}'
        locality_name: '{{ item.value.ssl_auto_signed.locality_name|default(omit) }}'
        organization_name: '{{ item.value.ssl_auto_signed.organization_name|default(omit) }}'
        organizational_unit_name: '{{ item.value.ssl_auto_signed.organizational_unit_name|default(omit) }}'
        state_or_province_name: '{{ item.value.ssl_auto_signed.state_or_province_name|default(omit) }}'
        subject: '{{ item.value.ssl_auto_signed.subject|default(omit) }}'
        subject_alt_name: '{{ item.value.ssl_auto_signed.subject_alt_name|default(omit) }}'
        state: present
        owner: '{{ nginx_daemon_user }}'
        group: '{{ nginx_daemon_group }}'
        mode: '440'
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.ssl_auto_signed is defined
      with_dict: '{{ nginx_sites }}'

    - name: Generate the Nginx self signed certificates (certificate)
      ansible.builtin.openssl_certificate:
        path: /etc/nginx/sites-ssl/{{ item.value.name }}.crt
        csr_path: /etc/nginx/sites-ssl/{{ item.value.name }}.csr
        privatekey_path: /etc/nginx/sites-ssl/{{ item.value.name }}.key
        provider: selfsigned
        state: present
        owner: '{{ nginx_daemon_user }}'
        group: '{{ nginx_daemon_group }}'
        mode: '440'
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.ssl_auto_signed is defined
      with_dict: '{{ nginx_sites }}'

    - name: Setup the Nginx sites certificates
      ansible.builtin.copy:
        src: '{{ item.0.ssl_files_prefix }}.{{ item.1 }}'
        dest: /etc/nginx/sites-ssl/{{ item.0.name }}.{{ item.1 }}
        owner: '{{ nginx_daemon_user }}'
        group: '{{ nginx_daemon_group }}'
        mode: '440'
      loop: "{{ lookup('nested', nginx_sites.values(), ['crt', 'key']) }}"
      loop_control:
        label: '{{ item.0.name }} {{ item.1 }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.0.ssl_files_prefix|default('')|length > 0

    - name: Setup the Nginx sites Diffie-Hellman parameters
      ansible.builtin.command:
        openssl dhparam -out /etc/nginx/sites-dhparam/{{ item.value.name }}.pem 2048
      args:
        creates: /etc/nginx/sites-dhparam/{{ item.value.name }}.pem
      loop_control:
        label: '{{ item.value.name }}'
      notify: '{{ nginx_daemon_modes[nginx_daemon_mode] }} reload nginx'
      when: item.value.with_dhparam|default(true)|bool
      with_dict: '{{ nginx_sites }}'

    - name: Create the Nginx sites logs directory
      ansible.builtin.file:
        name: /var/log/nginx/{{ item.value.name }}
        owner: '{{ nginx_daemon_user }}'
        group: '{{ nginx_daemon_group }}'
        mode: '755'
        follow: no
        recurse: yes
        state: directory
      loop_control:
        label: '{{ item.value.name }}'
      with_dict: '{{ nginx_sites }}'

    - name: Check Nginx config
      ansible.builtin.command: >
        {{ nginx_daemon_path }} -t
      changed_when: no
      check_mode: no
  become: '{{ do_become }}'
  tags: sites
